## {{ ansible_managed }}
# Consul Template Managed - HAProxy
# Used to re-render every boot so the service starts
{% raw %}
# Boot ID - {{ file "/proc/sys/kernel/random/boot_id" }}
{% endraw %}

global
        log stdout  format raw  local0  info
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&version=3.0.6&config=modern&openssl=3.4.0&guideline=5.7
        ssl-default-bind-curves X25519:prime256v1:secp384r1
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options prefer-client-ciphers ssl-min-ver TLSv1.3 no-tls-tickets

        ssl-default-server-curves X25519:prime256v1:secp384r1
        ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-server-options ssl-min-ver TLSv1.3 no-tls-tickets

        lua-load /etc/haproxy/lua/clientcert.lua

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull

        timeout connect 5000
        timeout client  50000
        timeout server  50000

        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

# https://www.haproxy.com/blog/exploring-the-haproxy-stats-page
frontend stats
        bind   :8404
        stats  enable
        stats  uri /stats
        stats  refresh 10s

# https://www.haproxy.com/documentation/haproxy-configuration-tutorials/alerts-and-monitoring/prometheus/
frontend prometheus
        bind :8405
        http-request use-service prometheus-exporter if { path /metrics }
        no log

# https://www.haproxy.com/documentation/haproxy-configuration-tutorials/ssl-tls/#redirect-http-to-https
frontend http
        bind :80 accept-proxy

        http-request redirect scheme https code 301 unless { ssl_fc }

frontend https
        # Verifying Optional so backend systems can do mtls via headers
        # The ca given may not be the real CA the backend needs to verify against
        # So we are ignoring the error when it doesn't match
        bind :443 accept-proxy ssl crt /etc/ssl/private/haproxy.crt verify optional ca-file /usr/local/share/ca-certificates/smallstep-homelab-prod.crt ca-ignore-err X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY

        http-response set-header Strict-Transport-Security "max-age=16000000;"
        
        http-request del-header Proxy

        use_backend %[req.hdr(host),lower,map(/etc/haproxy/http-domain2backend-map.txt)]

resolvers nameservers
        parse-resolv-conf

{% for key, value in haproxy_hosts.items() %}
    backend {{ key }}
    {% for item in value.config %}
        {{ item }}
    {% endfor %}

{% endfor %}

{% raw %}
# Crazy stuff cause of this https://github.com/hashicorp/consul-template/issues/1804
{{ range services }}
    {{- range service .Name }}
        {{- if eq .ServiceMeta.haproxy_t2 "true" }}
    backend {{ .Name }}
        balance roundrobin
        option forwardfor
        option forwarded
        option httpchk {{ .ServiceMeta.haproxy_t2_check_method | sprig_default "GET" }} {{ .ServiceMeta.haproxy_t2_check_uri | sprig_default "/health" }}
            {{- range service (printf "%s|any" .Name) }}
        server {{ .Node }} {{ .Node }}.us-homelab1.hl.rmb938.me:{{ .Port }} check resolvers nameservers init-addr last,libc,none observe layer7 on-error mark-down ssl verify required ca-file @system-ca
            {{- end }}
        {{- break}}
        {{- end }}
    {{- end }}
{{- end }}
{% endraw %}
